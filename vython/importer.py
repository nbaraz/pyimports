import sys
import os
import pytoml

if sys.version_info.major == 3:
    from . import importer3 as importer
else:
    from . import importer2 as importer

REPO = importer.REPO


# TODOS: Same as in nope.py
# TODO: Use json for the lockfile. having toml as a dependecy is stupid, and it's autogenerated
#   anyway.
# TODO: Find a better solution for the repo location
# TODO: Find a better solution for the lockfile location. Maybe next to the file being run?
# TODO: Adding things to the path is problematic, as it slows down interpreter startup.
#   Theoretical solution:
#   Have python lazily cache all path entry dirlists. On import failure, refresh the cache. If
#   the import still fails, raise the error. This gives us a faster common case at the expense of
#   a slower error case.
#
#   This approach probably needs interpretr code changes.


def install_hook(lockfile_dir='.'):
    """
    Install the versioned import hook
    """
    importer._install_hook_init()

    stripped_script_name, ext = os.path.splitext(os.path.basename(sys.argv[0]))
    if not ext or ext.lower() == '.py':
        script_name = stripped_script_name
    else:
        script_name = sys.argv[0]

    lock_name = script_name + '-lock.toml'

    with open(os.path.join(lockfile_dir, lock_name)) as lock_file:
        lock_dict = pytoml.load(lock_file)

    for package_name, version in lock_dict['packages'].items():
        if not importer._install_package_in_path(package_name, version):
            raise RuntimeError('Could not find all versioned packages', (package_name, version))

    importer._install_hook_finalize()
